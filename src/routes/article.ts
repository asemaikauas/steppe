import express from 'express';
import { ArticleController } from '../controllers/articleController';
import { VoiceService } from '../services/voiceService';
import { VideoService } from '../services/videoService';
import { Request, Response } from 'express';

const router = express.Router();
const articleController = new ArticleController();
const voiceService = new VoiceService();

// POST /generate - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç URL –Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–º–µ—â–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
router.post('/generate', (req, res) => {
    articleController.generateVideo(req, res);
});

// GET /status/:jobId - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
router.get('/status/:jobId', (req, res) => {
    articleController.getJobStatus(req, res);
});

// GET /jobs - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
router.get('/jobs', (req, res) => {
    articleController.getAllJobs(req, res);
});

// POST /regenerate/:jobId - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ
router.post('/regenerate/:jobId', (req, res) => {
    articleController.regenerateVideo(req, res);
});

// POST /test-media - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞
router.post('/test-media', (req, res) => {
    articleController.testMediaSearch(req, res);
});

// POST /test-video - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –≤–∏–¥–µ–æ
router.post('/test-video', (req, res) => {
    articleController.testVideoAssembly(req, res);
});

// POST /test-dynamic-video - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–∞–¥—Ä–æ–≤
router.post('/test-dynamic-video', (req, res) => {
    articleController.testDynamicVideo(req, res);
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
router.post('/test-voice', async (req, res) => {
    try {
        const { text } = req.body;

        if (!text) {
            return res.status(400).json({
                error: 'Text is required',
                message: 'Please provide text to synthesize'
            });
        }

        console.log('Testing voice synthesis...');

        const result = await voiceService.synthesizeSpeech(text, {
            voiceId: 'pNInz6obpgDQGcFmaJgB',
            stability: 0.7,
            similarityBoost: 0.8
        });

        if (result) {
            res.json({
                success: true,
                audioPath: result.audioPath,
                duration: result.duration,
                message: 'Voice synthesis completed successfully'
            });
        } else {
            res.status(500).json({
                error: 'Voice synthesis failed',
                message: 'Check your ElevenLabs API key and try again'
            });
        }

    } catch (error: any) {
        console.error('Test voice error:', error);
        res.status(500).json({
            error: 'Internal server error',
            message: error.message
        });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
router.get('/voices', async (req, res) => {
    try {
        const voices = await voiceService.getAvailableVoices();
        res.json({
            voices,
            count: voices.length
        });
    } catch (error: any) {
        console.error('Get voices error:', error);
        res.status(500).json({
            error: 'Failed to fetch voices',
            message: error.message
        });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
router.post('/test-subtitles', async (req: Request, res: Response) => {
    try {
        const { script } = req.body;

        if (!script) {
            return res.status(400).json({
                error: 'Missing required field',
                message: 'Please provide script'
            });
        }

        console.log('Testing subtitle generation...');

        const videoService = new VideoService();

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testId = 'test-' + Date.now();

        // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const subtitlePath = await (videoService as any).generateSubtitles(script, testId);

        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        const fs = require('fs');
        const subtitleContent = fs.readFileSync(subtitlePath, 'utf8');

        res.json({
            success: true,
            subtitlePath,
            content: subtitleContent,
            message: 'Subtitle generation completed successfully'
        });

    } catch (error: any) {
        console.error('Test subtitle generation error:', error);
        res.status(500).json({
            error: 'Subtitle generation failed',
            message: error.message
        });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
router.post('/test-full-pipeline', async (req: Request, res: Response) => {
    try {
        const { url } = req.body;

        if (!url) {
            return res.status(400).json({
                error: 'Missing required field',
                message: 'Please provide article URL'
            });
        }

        console.log('üöÄ Testing full pipeline with STEPPE watermark...');

        const controller = new ArticleController();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
        const result = await controller.generateVideo(req, res);

        // –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ res –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ

    } catch (error: any) {
        console.error('Test full pipeline error:', error);
        res.status(500).json({
            error: 'Full pipeline test failed',
            message: error.message
        });
    }
});

// –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
router.post('/test-regeneration', async (req: Request, res: Response) => {
    try {
        const testUrl = 'https://the-steppe.com/gorod/issledovanie-dva-chasa-v-nedelyu-na-prirode-vedut-k-uluchsheniyu-zdorovya';

        console.log('üß™ Testing regeneration functionality...');

        // 1. –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
        console.log('1Ô∏è‚É£ Testing normal request...');

        // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        console.log('2Ô∏è‚É£ Testing force regeneration...');

        res.json({
            message: 'Regeneration test endpoints',
            examples: {
                normal: {
                    method: 'POST',
                    url: '/api/article/generate',
                    body: { url: testUrl },
                    description: 'Shows warning if job exists'
                },
                force: {
                    method: 'POST',
                    url: '/api/article/generate',
                    body: { url: testUrl, force: true },
                    description: 'Forces regeneration by deleting old job'
                },
                regenerateById: {
                    method: 'POST',
                    url: '/api/article/regenerate/:jobId',
                    description: 'Regenerates existing job by ID'
                }
            },
            testUrl: testUrl
        });

    } catch (error: any) {
        console.error('Test regeneration error:', error);
        res.status(500).json({
            error: 'Test failed',
            message: error.message
        });
    }
});

export default router; 