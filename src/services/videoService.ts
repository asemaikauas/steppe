import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { MediaItem } from './mediaService';
import { VoiceService } from './voiceService';

const execAsync = promisify(exec);

export interface VideoAssemblyOptions {
    backgroundVideo: MediaItem;
    audioPath: string;
    audioDuration: number;
    script: string;
    title: string;
    tags: string[];
    outputFormat?: 'mp4' | 'mov';
    resolution?: '1080x1920' | '720x1280'; // TikTok formats
    addSubtitles?: boolean;
}

export interface VideoResult {
    videoPath: string;
    duration: number;
    size: number; // –≤ –±–∞–π—Ç–∞—Ö
    resolution: string;
    hasSubtitles: boolean;
}

export class VideoService {
    private outputDir = path.join(process.cwd(), 'videos');
    private tempDir = path.join(process.cwd(), 'temp');

    constructor() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        this.ensureDirectories();
    }

    private ensureDirectories(): void {
        [this.outputDir, this.tempDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`üìÅ Created directory: ${dir}`);
            }
        });
    }

    async assembleVideo(options: VideoAssemblyOptions): Promise<VideoResult> {
        const videoId = uuidv4();
        console.log(`\nüé¨ ===== VIDEO ASSEMBLY STARTED =====`);
        console.log(`üéØ Video ID: ${videoId}`);
        console.log(`üéµ Audio: ${options.audioPath}`);
        console.log(`üé• Background: ${options.backgroundVideo.previewUrl}`);
        console.log(`‚è±Ô∏è Duration: ${options.audioDuration}s`);

        try {
            // 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
            const backgroundPath = await this.downloadBackgroundVideo(options.backgroundVideo, videoId);

            // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            let subtitlePath: string | null = null;
            if (options.addSubtitles !== false) {
                subtitlePath = await this.generateSubtitles(options.script, videoId);
            }

            // 3. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            const outputPath = await this.assembleVideoWithFFmpeg({
                backgroundPath,
                audioPath: options.audioPath,
                subtitlePath,
                duration: options.audioDuration,
                resolution: options.resolution || '1080x1920',
                outputFormat: options.outputFormat || 'mp4',
                videoId
            });

            // 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ–æ
            const videoInfo = await this.getVideoInfo(outputPath);

            // 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await this.cleanupTempFiles([backgroundPath, subtitlePath]);

            console.log(`‚úÖ VIDEO ASSEMBLY COMPLETED`);
            console.log(`üìÅ Output: ${outputPath}`);
            console.log(`üìè Resolution: ${videoInfo.resolution}`);
            console.log(`‚è±Ô∏è Duration: ${videoInfo.duration}s`);
            console.log(`üì¶ Size: ${(videoInfo.size / 1024 / 1024).toFixed(2)} MB`);
            console.log(`üé¨ ===== END VIDEO ASSEMBLY =====\n`);

            return {
                videoPath: outputPath,
                duration: videoInfo.duration,
                size: videoInfo.size,
                resolution: videoInfo.resolution,
                hasSubtitles: !!subtitlePath
            };

        } catch (error: any) {
            console.error(`‚ùå Video assembly failed for ${videoId}:`, error);
            throw new Error(`Video assembly failed: ${error.message}`);
        }
    }

    private async downloadBackgroundVideo(video: MediaItem, videoId: string): Promise<string> {
        console.log(`üì• Downloading background video...`);

        const tempPath = path.join(this.tempDir, `bg_${videoId}.mp4`);

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
            await execAsync(`curl -L -o "${tempPath}" "${video.url}"`);

            if (!fs.existsSync(tempPath)) {
                throw new Error('Failed to download background video');
            }

            const stats = fs.statSync(tempPath);
            console.log(`‚úÖ Downloaded: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);

            return tempPath;
        } catch (error: any) {
            throw new Error(`Failed to download video: ${error.message}`);
        }
    }

    private async generateSubtitles(script: string, videoId: string): Promise<string> {
        console.log(`üìù Generating subtitles...`);

        const subtitlePath = path.join(this.tempDir, `subtitles_${videoId}.srt`);

        try {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanScript = script.replace(/[^\w\s–ê-–Ø–∞-—è—ë.,!?-]/g, '').trim();

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            const words = cleanScript.split(' ');
            const chunks: string[] = [];

            // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –ø–æ 2-3 —Å–ª–æ–≤–∞ –¥–ª—è –ë–´–°–¢–†–û–ô —Å–º–µ–Ω—ã (–∫–∞–∫ –≤ TikTok)
            for (let i = 0; i < words.length; i += 3) {
                const chunk = words.slice(i, i + 3).join(' ');
                chunks.push(chunk);
            }

            // –°–æ–∑–¥–∞–µ–º SRT —Ñ–∞–π–ª
            let srtContent = '';
            const chunkDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ chunk - –±—ã—Å—Ç—Ä–µ–µ!

            chunks.forEach((chunk, index) => {
                const startTime = this.formatSRTTime(index * chunkDuration);
                const endTime = this.formatSRTTime((index + 1) * chunkDuration);

                srtContent += `${index + 1}\n`;
                srtContent += `${startTime} --> ${endTime}\n`;
                srtContent += `${chunk}\n\n`; // –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞!
            });

            // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ü–µ —á—Ç–æ–±—ã —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∏—Å—å
            const totalDuration = chunks.length * chunkDuration;
            if (totalDuration < 60) { // –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                const endTime = this.formatSRTTime(Math.max(totalDuration + 5, 30)); // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫
                srtContent += `${chunks.length + 1}\n`;
                srtContent += `${this.formatSRTTime(totalDuration)} --> ${endTime}\n`;
                srtContent += `\n\n`; // –ü—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            }

            fs.writeFileSync(subtitlePath, srtContent, 'utf8');
            console.log(`‚úÖ Subtitles generated: ${chunks.length} fast-sync segments (2s each, extended to ${Math.max(totalDuration + 5, 30)}s)`);

            return subtitlePath;
        } catch (error: any) {
            console.error('Subtitle generation error:', error);
            throw new Error(`Failed to generate subtitles: ${error.message}`);
        }
    }

    private formatSRTTime(seconds: number): string {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        const milliseconds = Math.floor((seconds % 1) * 1000);

        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')},${String(milliseconds).padStart(3, '0')}`;
    }

    // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FFmpeg –∫–æ–º–∞–Ω–¥
    private buildFFmpegCommand(params: {
        inputs: string[];
        duration: number;
        resolution: string;
        subtitlePath?: string | null;
        outputPath: string;
        videoFilter?: string;
        isDynamic?: boolean;
    }): string {
        const [width, height] = params.resolution.split('x');

        let command = ['ffmpeg -y'];

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (params.isDynamic) {
            command.push('-f concat -safe 0');
        }
        params.inputs.forEach(input => command.push(`-i "${input}"`));

        // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ, –∞ –Ω–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
        command.push(`-t ${params.duration}`);

        // –°–æ–∑–¥–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ STEPPE
        const steppeWatermark = `drawtext=text='STEPPE':fontfile=/System/Library/Fonts/Arial.ttf:fontsize=60:fontcolor=black:alpha=0.9:x=(w-text_w)/2:y=80:box=1:boxcolor=black@0.3:boxborderw=5`;

        // –í–∏–¥–µ–æ —Ñ–∏–ª—å—Ç—Ä—ã
        if (params.subtitlePath) {
            const subtitleFilter = `subtitles='${params.subtitlePath}':force_style='FontName=Inter,FontSize=14,PrimaryColour=&Hffffff,Outline=0,Bold=0,MarginV=50,Alignment=1'`;
            const scaleFilter = `[0:v]scale=${width}:${height}:force_original_aspect_ratio=increase,crop=${width}:${height}[scaled]`;
            // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ ‚Üí —Å—É–±—Ç–∏—Ç—Ä—ã
            command.push(`-filter_complex "${scaleFilter};[scaled]${steppeWatermark}[watermarked];[watermarked]${subtitleFilter}[video]"`);
            command.push('-map "[video]"', '-map 1:a');
        } else if (params.videoFilter) {
            command.push(`-vf "${params.videoFilter},${steppeWatermark}"`);
        } else {
            command.push(`-vf "scale=${width}:${height}:force_original_aspect_ratio=increase,crop=${width}:${height},${steppeWatermark}"`);
        }

        // –ö–æ–¥–µ–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        command.push(
            '-c:v libx264',
            '-c:a aac',
            '-b:v 2M',
            '-b:a 128k',
            '-preset fast',
            '-movflags +faststart',
            // –í–ê–ñ–ù–û: –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä–æ—á–µ –∞—É–¥–∏–æ
            '-stream_loop -1',
            `"${params.outputPath}"`
        );

        return command.join(' ');
    }

    private async assembleVideoWithFFmpeg(params: {
        backgroundPath: string;
        audioPath: string;
        subtitlePath: string | null;
        duration: number;
        resolution: string;
        outputFormat: string;
        videoId: string;
    }): Promise<string> {
        console.log(`üîß Assembling video with FFmpeg...`);

        const outputPath = path.join(this.outputDir, `tiktok_${params.videoId}.${params.outputFormat}`);

        const command = this.buildFFmpegCommand({
            inputs: [params.backgroundPath, params.audioPath],
            duration: params.duration,
            resolution: params.resolution,
            subtitlePath: params.subtitlePath,
            outputPath
        });

        console.log(`üé¨ FFmpeg command: ${command.substring(0, 100)}...`);

        try {
            const { stdout, stderr } = await execAsync(command);

            if (!fs.existsSync(outputPath)) {
                throw new Error('FFmpeg did not produce output file');
            }

            console.log(`‚úÖ Video assembled successfully`);
            return outputPath;

        } catch (error: any) {
            console.error('FFmpeg error:', error);
            throw new Error(`FFmpeg processing failed: ${error.message}`);
        }
    }

    private async getVideoInfo(videoPath: string): Promise<{
        duration: number;
        size: number;
        resolution: string;
    }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe
            const command = `ffprobe -v quiet -print_format json -show_format -show_streams "${videoPath}"`;
            const { stdout } = await execAsync(command);
            const info = JSON.parse(stdout);

            const videoStream = info.streams.find((stream: any) => stream.codec_type === 'video');
            const stats = fs.statSync(videoPath);

            return {
                duration: parseFloat(info.format.duration),
                size: stats.size,
                resolution: `${videoStream.width}x${videoStream.height}`
            };
        } catch (error: any) {
            throw new Error(`Failed to get video info: ${error.message}`);
        }
    }

    private async cleanupTempFiles(filePaths: (string | null)[]): Promise<void> {
        console.log(`üßπ Cleaning up temporary files...`);

        for (const filePath of filePaths) {
            if (filePath && fs.existsSync(filePath)) {
                try {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Deleted: ${path.basename(filePath)}`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Could not delete ${filePath}:`, error);
                }
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    async getVideoList(): Promise<Array<{
        filename: string;
        path: string;
        size: number;
        created: Date;
    }>> {
        try {
            const files = fs.readdirSync(this.outputDir);
            const videoFiles = files.filter(file =>
                file.endsWith('.mp4') || file.endsWith('.mov')
            );

            return videoFiles.map(filename => {
                const filepath = path.join(this.outputDir, filename);
                const stats = fs.statSync(filepath);

                return {
                    filename,
                    path: filepath,
                    size: stats.size,
                    created: stats.birthtime
                };
            }).sort((a, b) => b.created.getTime() - a.created.getTime());

        } catch (error: any) {
            throw new Error(`Failed to get video list: ${error.message}`);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ
    async cleanupOldVideos(maxAgeHours: number = 24): Promise<number> {
        try {
            const videos = await this.getVideoList();
            const cutoffTime = new Date(Date.now() - (maxAgeHours * 60 * 60 * 1000));

            let deletedCount = 0;

            for (const video of videos) {
                if (video.created < cutoffTime) {
                    fs.unlinkSync(video.path);
                    deletedCount++;
                    console.log(`üóëÔ∏è Deleted old video: ${video.filename}`);
                }
            }

            return deletedCount;
        } catch (error: any) {
            console.error('Cleanup error:', error);
            return 0;
        }
    }

    async assembleDynamicVideo(options: VideoAssemblyOptions & {
        keyPoints: string[];
        contentSegments?: Array<{
            text: string;
            searchQuery: string;
            duration: number;
        }>;
    }): Promise<VideoResult> {
        const videoId = uuidv4();
        console.log(`\nüé¨ ===== DYNAMIC VIDEO ASSEMBLY STARTED =====`);
        console.log(`üéØ Video ID: ${videoId}`);
        console.log(`üéµ Audio: ${options.audioPath}`);
        console.log(`‚è±Ô∏è Duration: ${options.audioDuration}s`);

        try {
            // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            const segments = await this.createContentSegments(options.script, options.keyPoints, options.audioDuration);

            // 2. –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            const mediaSegments = await this.downloadSegmentMedia(segments, videoId);

            // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
            let subtitlePath: string | null = null;
            if (options.addSubtitles !== false) {
                subtitlePath = await this.generateSubtitles(options.script, videoId);
            }

            // 4. –°–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ
            const outputPath = await this.assembleDynamicVideoWithFFmpeg({
                mediaSegments,
                audioPath: options.audioPath,
                subtitlePath,
                duration: options.audioDuration,
                resolution: options.resolution || '1080x1920',
                outputFormat: options.outputFormat || 'mp4',
                videoId
            });

            // 5. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ–æ
            const videoInfo = await this.getVideoInfo(outputPath);

            // 6. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            const tempFiles = [subtitlePath, ...mediaSegments.map(s => s.localPath)];
            await this.cleanupTempFiles(tempFiles);

            console.log(`‚úÖ DYNAMIC VIDEO ASSEMBLY COMPLETED`);
            console.log(`üìÅ Output: ${outputPath}`);
            console.log(`üìè Resolution: ${videoInfo.resolution}`);
            console.log(`‚è±Ô∏è Duration: ${videoInfo.duration}s`);
            console.log(`üé¨ Segments: ${segments.length} content changes`);
            console.log(`üé¨ ===== END DYNAMIC VIDEO ASSEMBLY =====\n`);

            return {
                videoPath: outputPath,
                duration: videoInfo.duration,
                size: videoInfo.size,
                resolution: videoInfo.resolution,
                hasSubtitles: !!subtitlePath
            };

        } catch (error: any) {
            console.error(`‚ùå Dynamic video assembly failed for ${videoId}:`, error);
            throw new Error(`Dynamic video assembly failed: ${error.message}`);
        }
    }

    private async createContentSegments(script: string, keyPoints: string[], totalDuration: number): Promise<Array<{
        text: string;
        searchQuery: string;
        startTime: number;
        duration: number;
    }>> {
        console.log(`üîç Creating content segments...`);

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        const cleanScript = script.replace(/[^\w\s–ê-–Ø–∞-—è—ë.,!?-]/g, '').trim();
        const sentences = cleanScript.split(/[.!?]+/).filter(s => s.trim().length > 0);

        const segmentDuration = 4; // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
        const segments: Array<{
            text: string;
            searchQuery: string;
            startTime: number;
            duration: number;
        }> = [];

        for (let i = 0; i < sentences.length && i * segmentDuration < totalDuration; i++) {
            const sentence = sentences[i].trim();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            let searchQuery = this.extractSearchQuery(sentence, keyPoints);

            segments.push({
                text: sentence,
                searchQuery,
                startTime: i * segmentDuration,
                duration: Math.min(segmentDuration, totalDuration - (i * segmentDuration))
            });
        }

        console.log(`‚úÖ Created ${segments.length} content segments`);
        segments.forEach((seg, i) => {
            console.log(`   ${i + 1}. "${seg.text.substring(0, 50)}..." ‚Üí "${seg.searchQuery}"`);
        });

        return segments;
    }

    private extractSearchQuery(text: string, keyPoints: string[]): string {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const translations: { [key: string]: string } = {
            // –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'health medical',
            '—Å–ø–æ—Ä—Ç': 'sport fitness',
            '–±–µ–≥': 'running jogging',
            '–∂–∞—Ä–∞': 'summer heat weather',
            '—Å–µ—Ä–¥—Ü–µ': 'heart cardio medical',
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'workout training gym',
            '–ø–∏—Ç–∞–Ω–∏–µ': 'nutrition food healthy',
            '–±–æ–ª–µ–∑–Ω—å': 'illness disease medical',
            '–≤—Ä–∞—á': 'doctor medical hospital',
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ': 'medicine pharmacy medical',

            // –ù–∞—É–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': 'research science laboratory',
            '—É—á–µ–Ω—ã–µ': 'scientists research laboratory',
            '–Ω–∞—É–∫–∞': 'science research technology',
            '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç': 'experiment laboratory science',
            '–¥–∞–Ω–Ω—ã–µ': 'data analysis research',

            // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –º–µ—Å—Ç–∞
            '–∞–ª–º–∞—Ç—ã': 'almaty kazakhstan city urban',
            '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': 'kazakhstan central asia',
            '–∞—Å—Ç–∞–Ω–∞': 'astana nur-sultan kazakhstan',
            '–≥–æ—Ä–æ–¥': 'city urban buildings',
            '—É–ª–∏—Ü–∞': 'street road urban',
            '–ø–∞—Ä–∫': 'park nature green',
            '–≥–æ—Ä—ã': 'mountains landscape nature',

            // –≠–∫–æ–ª–æ–≥–∏—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞
            '–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ': 'pollution environment ecology',
            '–≤–æ–∑–¥—É—Ö': 'air pollution environment',
            '—ç–∫–æ–ª–æ–≥–∏—è': 'ecology environment nature',
            '–ø—Ä–∏—Ä–æ–¥–∞': 'nature landscape environment',
            '–∫–ª–∏–º–∞—Ç': 'climate weather environment',
            '–º—É—Å–æ—Ä': 'waste garbage pollution',

            // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education school university',
            '—à–∫–æ–ª–∞': 'school education children',
            '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': 'university college education',
            '—Å—Ç—É–¥–µ–Ω—Ç—ã': 'students university education',
            '—É—á–µ–±–∞': 'study education learning',
            '—ç–∫–∑–∞–º–µ–Ω': 'exam test education',

            // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology innovation digital',
            '–ò–ò': 'artificial intelligence AI technology',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'computer technology digital',
            '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'internet technology digital',
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': 'smartphone mobile technology',
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': 'app mobile technology',

            // –û–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞
            '–¥–µ–±–∞—Ç—ã': 'debate discussion politics',
            '–ø–æ–ª–∏—Ç–∏–∫–∞': 'politics government society',
            '–≤—ã–±–æ—Ä—ã': 'elections voting politics',
            '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'government politics official',
            '–∑–∞–∫–æ–Ω': 'law legal government',

            // –õ—é–¥–∏ –∏ —Å–æ—Ü–∏—É–º
            '–º–æ–ª–æ–¥–µ–∂—å': 'youth young people',
            '–¥–µ—Ç–∏': 'children kids family',
            '—Å–µ–º—å—è': 'family people home',
            '—Ä–∞–±–æ—Ç–∞': 'work office business',
            '–±–∏–∑–Ω–µ—Å': 'business office corporate',
            '–¥–µ–Ω—å–≥–∏': 'money finance business',

            // –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            '–∫—É–ª—å—Ç—É—Ä–∞': 'culture art tradition',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'art culture creative',
            '–º—É–∑—ã–∫–∞': 'music concert performance',
            '—Ç–µ–∞—Ç—Ä': 'theater performance culture',
            '–∫–∏–Ω–æ': 'cinema movie entertainment',
            '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å': 'festival celebration culture',

            // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'transport traffic urban',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'car vehicle traffic',
            '–∞–≤—Ç–æ–±—É—Å': 'bus public transport',
            '–º–µ—Ç—Ä–æ': 'subway metro transport',
            '–¥–æ—Ä–æ–≥–∞': 'road traffic transport',

            // –ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            '–µ–¥–∞': 'food restaurant cooking',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant food dining',
            '–∫–∞—Ñ–µ': 'cafe coffee restaurant',
            '–≥–æ—Ç–æ–≤–∫–∞': 'cooking food kitchen',

            // –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è –≥–æ–¥–∞
            '–∑–∏–º–∞': 'winter snow cold',
            '–ª–µ—Ç–æ': 'summer sun hot',
            '–≤–µ—Å–Ω–∞': 'spring flowers nature',
            '–æ—Å–µ–Ω—å': 'autumn fall leaves',
            '–¥–æ–∂–¥—å': 'rain weather storm',
            '—Å–Ω–µ–≥': 'snow winter cold'
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ
        const words = text.toLowerCase().split(/[\s.,!?]+/).filter(w => w.length > 2);
        let searchTerms: string[] = [];
        let contextTerms: string[] = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        words.forEach(word => {
            if (translations[word]) {
                searchTerms.push(translations[word]);
            }
        });

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if (text.toLowerCase().includes('–∑–∞–≥—Ä—è–∑–Ω') || text.toLowerCase().includes('—ç–∫–æ–ª–æ–≥')) {
            contextTerms.push('pollution environment');
        }
        if (text.toLowerCase().includes('–∑–¥–æ—Ä–æ–≤') || text.toLowerCase().includes('–º–µ–¥–∏—Ü–∏–Ω')) {
            contextTerms.push('health medical');
        }
        if (text.toLowerCase().includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω') || text.toLowerCase().includes('—à–∫–æ–ª') || text.toLowerCase().includes('—Å—Ç—É–¥–µ–Ω—Ç')) {
            contextTerms.push('education school');
        }
        if (text.toLowerCase().includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥') || text.toLowerCase().includes('—Ü–∏—Ñ—Ä–æ–≤') || text.toLowerCase().includes('–ò–ò')) {
            contextTerms.push('technology digital');
        }
        if (text.toLowerCase().includes('–ø–æ–ª–∏—Ç–∏–∫') || text.toLowerCase().includes('–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤') || text.toLowerCase().includes('–≤—ã–±–æ—Ä')) {
            contextTerms.push('politics government');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ keyPoints
        keyPoints.forEach(point => {
            const pointLower = point.toLowerCase();
            if (text.toLowerCase().includes(pointLower)) {
                if (translations[pointLower]) {
                    searchTerms.push(translations[pointLower]);
                } else if (pointLower.length > 2) {
                    searchTerms.push(point);
                }
            }
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã
        const allTerms = [...searchTerms, ...contextTerms];

        // Fallback –Ω–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (allTerms.length === 0) {
            if (text.toLowerCase().includes('–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω') || text.toLowerCase().includes('–∞–ª–º–∞—Ç—ã')) {
                allTerms.push('kazakhstan city urban');
            } else if (text.toLowerCase().includes('–ª—é–¥–∏') || text.toLowerCase().includes('—á–µ–ª–æ–≤–µ–∫')) {
                allTerms.push('people society');
            } else {
                allTerms.push('modern life urban');
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 4 —Ç–µ—Ä–º–∏–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        return allTerms.slice(0, 4).join(' ');
    }

    private async downloadSegmentMedia(segments: Array<{
        text: string;
        searchQuery: string;
        startTime: number;
        duration: number;
    }>, videoId: string): Promise<Array<{
        searchQuery: string;
        localPath: string;
        startTime: number;
        duration: number;
    }>> {
        console.log(`üì• Downloading media for segments...`);

        const mediaSegments: Array<{
            searchQuery: string;
            localPath: string;
            startTime: number;
            duration: number;
        }> = [];

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MediaService –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const { MediaService } = await import('./mediaService');
        const mediaService = new MediaService();

        for (let i = 0; i < segments.length; i++) {
            const segment = segments[i];
            const segmentPath = path.join(this.tempDir, `segment_${videoId}_${i}.mp4`);

            try {
                console.log(`   üîç Searching for: "${segment.searchQuery}"`);

                // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ MediaService
                const searchResults = await mediaService.searchVideos(segment.searchQuery, 3);

                if (searchResults.length > 0) {
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∏–¥–µ–æ
                    const selectedVideo = searchResults[0];
                    console.log(`   üìπ Found: ${selectedVideo.tags?.join(', ') || 'No tags'}`);

                    // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    const response = await fetch(selectedVideo.url);
                    if (response.ok) {
                        const buffer = await response.arrayBuffer();
                        const fs = require('fs');
                        fs.writeFileSync(segmentPath, Buffer.from(buffer));

                        console.log(`   ‚úÖ Downloaded: ${(buffer.byteLength / 1024 / 1024).toFixed(2)} MB`);
                    } else {
                        throw new Error(`Failed to download video: ${response.status}`);
                    }
                } else {
                    console.log(`   ‚ö†Ô∏è No videos found for "${segment.searchQuery}", using fallback`);
                    throw new Error('No videos found');
                }

                mediaSegments.push({
                    searchQuery: segment.searchQuery,
                    localPath: segmentPath,
                    startTime: segment.startTime,
                    duration: segment.duration
                });

                console.log(`   ‚úÖ Segment ${i + 1}: "${segment.searchQuery}" ‚Üí ${path.basename(segmentPath)}`);

            } catch (error) {
                console.error(`   ‚ùå Failed to download for "${segment.searchQuery}":`, error);

                // Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                try {
                    if (i > 0 && mediaSegments[i - 1]) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Å–ø–µ—à–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
                        await execAsync(`cp "${mediaSegments[i - 1].localPath}" "${segmentPath}"`);
                        console.log(`   üîÑ Used previous segment as fallback`);
                    } else {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
                        await execAsync(`cp test_video.mp4 "${segmentPath}"`);
                        console.log(`   üîÑ Used base video as fallback`);
                    }

                    mediaSegments.push({
                        searchQuery: `${segment.searchQuery} (fallback)`,
                        localPath: segmentPath,
                        startTime: segment.startTime,
                        duration: segment.duration
                    });
                } catch (fallbackError) {
                    console.error(`   üí• Fallback also failed:`, fallbackError);
                    throw new Error(`Failed to create segment ${i + 1}`);
                }
            }
        }

        console.log(`‚úÖ Media download completed: ${mediaSegments.length} segments`);
        return mediaSegments;
    }

    private async assembleDynamicVideoWithFFmpeg(params: {
        mediaSegments: Array<{
            localPath: string;
            startTime: number;
            duration: number;
        }>;
        audioPath: string;
        subtitlePath: string | null;
        duration: number;
        resolution: string;
        outputFormat: string;
        videoId: string;
    }): Promise<string> {
        console.log(`üîß Assembling dynamic video with FFmpeg...`);

        const outputPath = path.join(this.outputDir, `dynamic_${params.videoId}.${params.outputFormat}`);

        // –°–æ–∑–¥–∞–µ–º concat —Ñ–∞–π–ª –¥–ª—è FFmpeg
        const concatFile = path.join(this.tempDir, `concat_${params.videoId}.txt`);
        let concatContent = '';

        for (const segment of params.mediaSegments) {
            concatContent += `file '${segment.localPath}'\n`;
            concatContent += `duration ${segment.duration}\n`;
        }

        fs.writeFileSync(concatFile, concatContent);

        const command = this.buildFFmpegCommand({
            inputs: [concatFile, params.audioPath],
            duration: params.duration,
            resolution: params.resolution,
            subtitlePath: params.subtitlePath,
            outputPath,
            isDynamic: true
        });

        console.log(`üé¨ FFmpeg dynamic command: ${command.substring(0, 100)}...`);

        try {
            await execAsync(command);

            if (!fs.existsSync(outputPath)) {
                throw new Error('FFmpeg did not produce output file');
            }

            console.log(`‚úÖ Dynamic video assembled successfully`);

            // –û—á–∏—â–∞–µ–º concat —Ñ–∞–π–ª
            fs.unlinkSync(concatFile);

            return outputPath;

        } catch (error: any) {
            console.error('FFmpeg dynamic error:', error);
            throw new Error(`FFmpeg dynamic processing failed: ${error.message}`);
        }
    }
} 