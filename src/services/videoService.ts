import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { MediaItem } from './mediaService';
import { VoiceService } from './voiceService';

const execAsync = promisify(exec);

export interface VideoAssemblyOptions {
    backgroundVideo: MediaItem;
    audioPath: string;
    audioDuration: number;
    script: string;
    title: string;
    tags: string[];
    outputFormat?: 'mp4' | 'mov';
    resolution?: '1080x1920' | '720x1280'; // TikTok formats
    addSubtitles?: boolean;
}

export interface VideoResult {
    videoPath: string;
    duration: number;
    size: number; // –≤ –±–∞–π—Ç–∞—Ö
    resolution: string;
    hasSubtitles: boolean;
}

export class VideoService {
    private outputDir = path.join(process.cwd(), 'videos');
    private tempDir = path.join(process.cwd(), 'temp');

    constructor() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        this.ensureDirectories();
    }

    private ensureDirectories(): void {
        [this.outputDir, this.tempDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`üìÅ Created directory: ${dir}`);
            }
        });
    }

    async assembleVideo(options: VideoAssemblyOptions): Promise<VideoResult> {
        const videoId = uuidv4();
        console.log(`\nüé¨ ===== VIDEO ASSEMBLY STARTED =====`);
        console.log(`üéØ Video ID: ${videoId}`);
        console.log(`üéµ Audio: ${options.audioPath}`);
        console.log(`üé• Background: ${options.backgroundVideo.previewUrl}`);
        console.log(`‚è±Ô∏è Duration: ${options.audioDuration}s`);

        try {
            // 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
            const backgroundPath = await this.downloadBackgroundVideo(options.backgroundVideo, videoId);

            // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            let subtitlePath: string | null = null;
            if (options.addSubtitles !== false) {
                subtitlePath = await this.generateSubtitles(options.script, videoId);
            }

            // 3. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            const outputPath = await this.assembleVideoWithFFmpeg({
                backgroundPath,
                audioPath: options.audioPath,
                subtitlePath,
                duration: options.audioDuration,
                resolution: options.resolution || '1080x1920',
                outputFormat: options.outputFormat || 'mp4',
                videoId
            });

            // 4. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ–æ
            const videoInfo = await this.getVideoInfo(outputPath);

            // 5. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            await this.cleanupTempFiles([backgroundPath, subtitlePath]);

            console.log(`‚úÖ VIDEO ASSEMBLY COMPLETED`);
            console.log(`üìÅ Output: ${outputPath}`);
            console.log(`üìè Resolution: ${videoInfo.resolution}`);
            console.log(`‚è±Ô∏è Duration: ${videoInfo.duration}s`);
            console.log(`üì¶ Size: ${(videoInfo.size / 1024 / 1024).toFixed(2)} MB`);
            console.log(`üé¨ ===== END VIDEO ASSEMBLY =====\n`);

            return {
                videoPath: outputPath,
                duration: videoInfo.duration,
                size: videoInfo.size,
                resolution: videoInfo.resolution,
                hasSubtitles: !!subtitlePath
            };

        } catch (error: any) {
            console.error(`‚ùå Video assembly failed for ${videoId}:`, error);
            throw new Error(`Video assembly failed: ${error.message}`);
        }
    }

    private async downloadBackgroundVideo(video: MediaItem, videoId: string): Promise<string> {
        console.log(`üì• Downloading background video...`);

        const tempPath = path.join(this.tempDir, `bg_${videoId}.mp4`);

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
            await execAsync(`curl -L -o "${tempPath}" "${video.url}"`);

            if (!fs.existsSync(tempPath)) {
                throw new Error('Failed to download background video');
            }

            const stats = fs.statSync(tempPath);
            console.log(`‚úÖ Downloaded: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);

            return tempPath;
        } catch (error: any) {
            throw new Error(`Failed to download video: ${error.message}`);
        }
    }

    private async generateSubtitles(script: string, videoId: string): Promise<string> {
        console.log(`üìù Generating subtitles...`);

        const subtitlePath = path.join(this.tempDir, `subtitles_${videoId}.srt`);

        try {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanScript = script.replace(/[^\w\s–ê-–Ø–∞-—è—ë.,!?-]/g, '').trim();

            // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
            const words = cleanScript.split(' ');
            const chunks: string[] = [];

            // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –ø–æ 2-3 —Å–ª–æ–≤–∞ –¥–ª—è –ë–´–°–¢–†–û–ô —Å–º–µ–Ω—ã (–∫–∞–∫ –≤ TikTok)
            for (let i = 0; i < words.length; i += 3) {
                const chunk = words.slice(i, i + 3).join(' ');
                chunks.push(chunk);
            }

            // –°–æ–∑–¥–∞–µ–º SRT —Ñ–∞–π–ª
            let srtContent = '';
            const chunkDuration = 2; // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ chunk - –±—ã—Å—Ç—Ä–µ–µ!

            chunks.forEach((chunk, index) => {
                const startTime = this.formatSRTTime(index * chunkDuration);
                const endTime = this.formatSRTTime((index + 1) * chunkDuration);

                srtContent += `${index + 1}\n`;
                srtContent += `${startTime} --> ${endTime}\n`;
                srtContent += `${chunk}\n\n`; // –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞!
            });

            fs.writeFileSync(subtitlePath, srtContent, 'utf8');
            console.log(`‚úÖ Subtitles generated: ${chunks.length} fast-sync segments (2s each)`);

            return subtitlePath;
        } catch (error: any) {
            console.error('Subtitle generation error:', error);
            throw new Error(`Failed to generate subtitles: ${error.message}`);
        }
    }

    private formatSRTTime(seconds: number): string {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        const milliseconds = Math.floor((seconds % 1) * 1000);

        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')},${String(milliseconds).padStart(3, '0')}`;
    }

    private async assembleVideoWithFFmpeg(params: {
        backgroundPath: string;
        audioPath: string;
        subtitlePath: string | null;
        duration: number;
        resolution: string;
        outputFormat: string;
        videoId: string;
    }): Promise<string> {
        console.log(`üîß Assembling video with FFmpeg...`);

        const outputPath = path.join(this.outputDir, `tiktok_${params.videoId}.${params.outputFormat}`);

        // –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ FFmpeg
        let ffmpegCommand = [
            'ffmpeg -y', // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            `-i "${params.backgroundPath}"`, // –í—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
            `-i "${params.audioPath}"`, // –í—Ö–æ–¥–Ω–æ–µ –∞—É–¥–∏–æ
            `-t ${params.duration}`, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            `-vf "scale=${params.resolution}:force_original_aspect_ratio=increase,crop=${params.resolution.replace('x', ':')}"`, // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TikTok
            '-c:v libx264', // –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
            '-c:a aac', // –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
            '-b:v 2M', // –ë–∏—Ç—Ä–µ–π—Ç –≤–∏–¥–µ–æ
            '-b:a 128k', // –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
            '-preset fast', // –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            '-movflags +faststart' // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –≤–µ–±
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (params.subtitlePath) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º filter_complex –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
            const [width, height] = params.resolution.split('x');
            ffmpegCommand = [
                'ffmpeg -y',
                `-i "${params.backgroundPath}"`,
                `-i "${params.audioPath}"`,
                `-t ${params.duration}`,
                `-filter_complex "[0:v]scale=${width}:${height}:force_original_aspect_ratio=increase,crop=${width}:${height}[scaled];[scaled]subtitles='${params.subtitlePath}':force_style='FontName=Inter,FontSize=14,PrimaryColour=&Hffffff,Outline=1,Bold=0,MarginV=50,Alignment=1'[video]"`,
                '-map "[video]"',
                '-map 1:a',
                '-c:v libx264',
                '-c:a aac',
                '-b:v 2M',
                '-b:a 128k',
                '-preset fast',
                '-movflags +faststart'
            ];
        }

        ffmpegCommand.push(`"${outputPath}"`);

        const command = ffmpegCommand.join(' ');
        console.log(`üé¨ FFmpeg command: ${command.substring(0, 100)}...`);

        try {
            const { stdout, stderr } = await execAsync(command);

            if (!fs.existsSync(outputPath)) {
                throw new Error('FFmpeg did not produce output file');
            }

            console.log(`‚úÖ Video assembled successfully`);
            return outputPath;

        } catch (error: any) {
            console.error('FFmpeg error:', error);
            throw new Error(`FFmpeg processing failed: ${error.message}`);
        }
    }

    private async getVideoInfo(videoPath: string): Promise<{
        duration: number;
        size: number;
        resolution: string;
    }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ffprobe
            const command = `ffprobe -v quiet -print_format json -show_format -show_streams "${videoPath}"`;
            const { stdout } = await execAsync(command);
            const info = JSON.parse(stdout);

            const videoStream = info.streams.find((stream: any) => stream.codec_type === 'video');
            const stats = fs.statSync(videoPath);

            return {
                duration: parseFloat(info.format.duration),
                size: stats.size,
                resolution: `${videoStream.width}x${videoStream.height}`
            };
        } catch (error: any) {
            throw new Error(`Failed to get video info: ${error.message}`);
        }
    }

    private async cleanupTempFiles(filePaths: (string | null)[]): Promise<void> {
        console.log(`üßπ Cleaning up temporary files...`);

        for (const filePath of filePaths) {
            if (filePath && fs.existsSync(filePath)) {
                try {
                    fs.unlinkSync(filePath);
                    console.log(`üóëÔ∏è Deleted: ${path.basename(filePath)}`);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Could not delete ${filePath}:`, error);
                }
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
    async getVideoList(): Promise<Array<{
        filename: string;
        path: string;
        size: number;
        created: Date;
    }>> {
        try {
            const files = fs.readdirSync(this.outputDir);
            const videoFiles = files.filter(file =>
                file.endsWith('.mp4') || file.endsWith('.mov')
            );

            return videoFiles.map(filename => {
                const filepath = path.join(this.outputDir, filename);
                const stats = fs.statSync(filepath);

                return {
                    filename,
                    path: filepath,
                    size: stats.size,
                    created: stats.birthtime
                };
            }).sort((a, b) => b.created.getTime() - a.created.getTime());

        } catch (error: any) {
            throw new Error(`Failed to get video list: ${error.message}`);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ
    async cleanupOldVideos(maxAgeHours: number = 24): Promise<number> {
        try {
            const videos = await this.getVideoList();
            const cutoffTime = new Date(Date.now() - (maxAgeHours * 60 * 60 * 1000));

            let deletedCount = 0;

            for (const video of videos) {
                if (video.created < cutoffTime) {
                    fs.unlinkSync(video.path);
                    deletedCount++;
                    console.log(`üóëÔ∏è Deleted old video: ${video.filename}`);
                }
            }

            return deletedCount;
        } catch (error: any) {
            console.error('Cleanup error:', error);
            return 0;
        }
    }

    async assembleDynamicVideo(options: VideoAssemblyOptions & {
        keyPoints: string[];
        contentSegments?: Array<{
            text: string;
            searchQuery: string;
            duration: number;
        }>;
    }): Promise<VideoResult> {
        const videoId = uuidv4();
        console.log(`\nüé¨ ===== DYNAMIC VIDEO ASSEMBLY STARTED =====`);
        console.log(`üéØ Video ID: ${videoId}`);
        console.log(`üéµ Audio: ${options.audioPath}`);
        console.log(`‚è±Ô∏è Duration: ${options.audioDuration}s`);

        try {
            // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            const segments = await this.createContentSegments(options.script, options.keyPoints, options.audioDuration);

            // 2. –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
            const mediaSegments = await this.downloadSegmentMedia(segments, videoId);

            // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã
            let subtitlePath: string | null = null;
            if (options.addSubtitles !== false) {
                subtitlePath = await this.generateSubtitles(options.script, videoId);
            }

            // 4. –°–æ–±–∏—Ä–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ
            const outputPath = await this.assembleDynamicVideoWithFFmpeg({
                mediaSegments,
                audioPath: options.audioPath,
                subtitlePath,
                duration: options.audioDuration,
                resolution: options.resolution || '1080x1920',
                outputFormat: options.outputFormat || 'mp4',
                videoId
            });

            // 5. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ–æ
            const videoInfo = await this.getVideoInfo(outputPath);

            // 6. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            const tempFiles = [subtitlePath, ...mediaSegments.map(s => s.localPath)];
            await this.cleanupTempFiles(tempFiles);

            console.log(`‚úÖ DYNAMIC VIDEO ASSEMBLY COMPLETED`);
            console.log(`üìÅ Output: ${outputPath}`);
            console.log(`üìè Resolution: ${videoInfo.resolution}`);
            console.log(`‚è±Ô∏è Duration: ${videoInfo.duration}s`);
            console.log(`üé¨ Segments: ${segments.length} content changes`);
            console.log(`üé¨ ===== END DYNAMIC VIDEO ASSEMBLY =====\n`);

            return {
                videoPath: outputPath,
                duration: videoInfo.duration,
                size: videoInfo.size,
                resolution: videoInfo.resolution,
                hasSubtitles: !!subtitlePath
            };

        } catch (error: any) {
            console.error(`‚ùå Dynamic video assembly failed for ${videoId}:`, error);
            throw new Error(`Dynamic video assembly failed: ${error.message}`);
        }
    }

    private async createContentSegments(script: string, keyPoints: string[], totalDuration: number): Promise<Array<{
        text: string;
        searchQuery: string;
        startTime: number;
        duration: number;
    }>> {
        console.log(`üîç Creating content segments...`);

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        const cleanScript = script.replace(/[^\w\s–ê-–Ø–∞-—è—ë.,!?-]/g, '').trim();
        const sentences = cleanScript.split(/[.!?]+/).filter(s => s.trim().length > 0);

        const segmentDuration = 4; // 4 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç
        const segments: Array<{
            text: string;
            searchQuery: string;
            startTime: number;
            duration: number;
        }> = [];

        for (let i = 0; i < sentences.length && i * segmentDuration < totalDuration; i++) {
            const sentence = sentences[i].trim();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            let searchQuery = this.extractSearchQuery(sentence, keyPoints);

            segments.push({
                text: sentence,
                searchQuery,
                startTime: i * segmentDuration,
                duration: Math.min(segmentDuration, totalDuration - (i * segmentDuration))
            });
        }

        console.log(`‚úÖ Created ${segments.length} content segments`);
        segments.forEach((seg, i) => {
            console.log(`   ${i + 1}. "${seg.text.substring(0, 50)}..." ‚Üí "${seg.searchQuery}"`);
        });

        return segments;
    }

    private extractSearchQuery(text: string, keyPoints: string[]): string {
        // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        const translations: { [key: string]: string } = {
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'health',
            '—Å–ø–æ—Ä—Ç': 'sport fitness',
            '–±–µ–≥': 'running jogging',
            '–∂–∞—Ä–∞': 'summer heat',
            '—Å–µ—Ä–¥—Ü–µ': 'heart cardio',
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'workout training',
            '–ø–∏—Ç–∞–Ω–∏–µ': 'nutrition food',
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': 'research science',
            '—É—á–µ–Ω—ã–µ': 'scientists research',
            '–∞–ª–º–∞—Ç—ã': 'almaty city',
            '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': 'kazakhstan',
            '–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ': 'pollution environment',
            '–≤–æ–∑–¥—É—Ö': 'air pollution',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education school',
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology innovation',
            '–ò–ò': 'artificial intelligence AI',
            '–¥–µ–±–∞—Ç—ã': 'debate discussion',
            '—Å—Ç—É–¥–µ–Ω—Ç—ã': 'students university',
            '–º–æ–ª–æ–¥–µ–∂—å': 'youth people'
        };

        // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        const words = text.toLowerCase().split(' ');
        let searchTerms: string[] = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        words.forEach(word => {
            if (translations[word]) {
                searchTerms.push(translations[word]);
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ keyPoints
        keyPoints.forEach(point => {
            const pointLower = point.toLowerCase();
            if (text.toLowerCase().includes(pointLower) || words.some(word => pointLower.includes(word))) {
                if (translations[pointLower]) {
                    searchTerms.push(translations[pointLower]);
                } else {
                    searchTerms.push(point);
                }
            }
        });

        // Fallback –Ω–∞ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if (searchTerms.length === 0) {
            searchTerms = ['lifestyle', 'modern life', 'city'];
        }

        return searchTerms.slice(0, 3).join(' '); // –ú–∞–∫—Å–∏–º—É–º 3 —Ç–µ—Ä–º–∏–Ω–∞
    }

    private async downloadSegmentMedia(segments: Array<{
        text: string;
        searchQuery: string;
        startTime: number;
        duration: number;
    }>, videoId: string): Promise<Array<{
        searchQuery: string;
        localPath: string;
        startTime: number;
        duration: number;
    }>> {
        console.log(`üì• Downloading media for segments...`);

        const mediaSegments: Array<{
            searchQuery: string;
            localPath: string;
            startTime: number;
            duration: number;
        }> = [];

        for (let i = 0; i < segments.length; i++) {
            const segment = segments[i];
            const segmentPath = path.join(this.tempDir, `segment_${videoId}_${i}.mp4`);

            try {
                // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∫–æ–ø–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤–∏–¥–µ–æ
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MediaService –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await execAsync(`cp test_video.mp4 "${segmentPath}"`);

                mediaSegments.push({
                    searchQuery: segment.searchQuery,
                    localPath: segmentPath,
                    startTime: segment.startTime,
                    duration: segment.duration
                });

                console.log(`   ‚úÖ Segment ${i + 1}: "${segment.searchQuery}" ‚Üí ${path.basename(segmentPath)}`);
            } catch (error) {
                console.error(`   ‚ùå Failed to download for "${segment.searchQuery}":`, error);
                // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–ª–∏ –±–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ
                const fallbackPath = i > 0 ? mediaSegments[i - 1].localPath : 'test_video.mp4';
                await execAsync(`cp "${fallbackPath}" "${segmentPath}"`);

                mediaSegments.push({
                    searchQuery: segment.searchQuery,
                    localPath: segmentPath,
                    startTime: segment.startTime,
                    duration: segment.duration
                });
            }
        }

        return mediaSegments;
    }

    private async assembleDynamicVideoWithFFmpeg(params: {
        mediaSegments: Array<{
            localPath: string;
            startTime: number;
            duration: number;
        }>;
        audioPath: string;
        subtitlePath: string | null;
        duration: number;
        resolution: string;
        outputFormat: string;
        videoId: string;
    }): Promise<string> {
        console.log(`üîß Assembling dynamic video with FFmpeg...`);

        const outputPath = path.join(this.outputDir, `dynamic_${params.videoId}.${params.outputFormat}`);
        const [width, height] = params.resolution.split('x');

        // –°–æ–∑–¥–∞–µ–º concat —Ñ–∞–π–ª –¥–ª—è FFmpeg
        const concatFile = path.join(this.tempDir, `concat_${params.videoId}.txt`);
        let concatContent = '';

        for (const segment of params.mediaSegments) {
            concatContent += `file '${segment.localPath}'\n`;
            concatContent += `duration ${segment.duration}\n`;
        }

        fs.writeFileSync(concatFile, concatContent);

        // –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ
        let ffmpegCommand = [
            'ffmpeg -y',
            '-f concat -safe 0',
            `-i "${concatFile}"`,
            `-i "${params.audioPath}"`,
            `-t ${params.duration}`,
            `-vf "scale=${width}:${height}:force_original_aspect_ratio=increase,crop=${width}:${height}"`,
            '-c:v libx264',
            '-c:a aac',
            '-b:v 2M',
            '-b:a 128k',
            '-preset fast',
            '-movflags +faststart'
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if (params.subtitlePath) {
            ffmpegCommand = [
                'ffmpeg -y',
                '-f concat -safe 0',
                `-i "${concatFile}"`,
                `-i "${params.audioPath}"`,
                `-t ${params.duration}`,
                `-filter_complex "[0:v]scale=${width}:${height}:force_original_aspect_ratio=increase,crop=${width}:${height}[scaled];[scaled]subtitles='${params.subtitlePath}':force_style='FontName=Inter,FontSize=16,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=1,Bold=0,MarginV=100,Alignment=2'[video]"`,
                '-map "[video]"',
                '-map 1:a',
                '-c:v libx264',
                '-c:a aac',
                '-b:v 2M',
                '-b:a 128k',
                '-preset fast',
                '-movflags +faststart'
            ];
        }

        ffmpegCommand.push(`"${outputPath}"`);

        const command = ffmpegCommand.join(' ');
        console.log(`üé¨ FFmpeg dynamic command: ${command.substring(0, 100)}...`);

        try {
            await execAsync(command);

            if (!fs.existsSync(outputPath)) {
                throw new Error('FFmpeg did not produce output file');
            }

            console.log(`‚úÖ Dynamic video assembled successfully`);

            // –û—á–∏—â–∞–µ–º concat —Ñ–∞–π–ª
            fs.unlinkSync(concatFile);

            return outputPath;

        } catch (error: any) {
            console.error('FFmpeg dynamic error:', error);
            throw new Error(`FFmpeg dynamic processing failed: ${error.message}`);
        }
    }
} 