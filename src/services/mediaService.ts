import { createClient } from 'pexels';
import dotenv from 'dotenv';

dotenv.config();

const client = createClient(process.env.PEXELS_API as string);

export interface MediaItem {
    id: number;
    url: string;
    previewUrl: string;
    type: 'image' | 'video';
    duration?: number;
    tags: string[];
    relevanceScore?: number;
    quality: 'hd' | 'sd';
}

export interface MediaSearchResult {
    videos: MediaItem[];
    images: MediaItem[];
    searchQuery: string;
    totalFound: number;
}

export class MediaService {
    private translateToEnglish(query: string): string {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        const translations: { [key: string]: string } = {
            // –ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'health medical',
            '—Å–ø–æ—Ä—Ç': 'sport fitness',
            '–±–µ–≥': 'running jogging',
            '–∂–∞—Ä–∞': 'summer heat weather',
            '—Å–µ—Ä–¥—Ü–µ': 'heart cardio medical',
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': 'workout training gym',
            '–ø–∏—Ç–∞–Ω–∏–µ': 'nutrition food healthy',
            '–±–æ–ª–µ–∑–Ω—å': 'illness disease medical',
            '–≤—Ä–∞—á': 'doctor medical hospital',
            '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ': 'medicine pharmacy medical',
            '–º–∞—Ä–∞—Ñ–æ–Ω': 'marathon running',

            // –ù–∞—É–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ': 'research science laboratory',
            '—É—á–µ–Ω—ã–µ': 'scientists research laboratory',
            '–Ω–∞—É–∫–∞': 'science research technology',
            '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç': 'experiment laboratory science',
            '–¥–∞–Ω–Ω—ã–µ': 'data analysis research',

            // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –º–µ—Å—Ç–∞
            '–∞–ª–º–∞—Ç—ã': 'almaty kazakhstan city urban',
            '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': 'kazakhstan central asia',
            '–∞—Å—Ç–∞–Ω–∞': 'astana nur-sultan kazakhstan',
            '–≥–æ—Ä–æ–¥': 'city urban buildings',
            '—É–ª–∏—Ü–∞': 'street road urban',
            '–ø–∞—Ä–∫': 'park nature green',
            '–≥–æ—Ä—ã': 'mountains landscape nature',

            // –≠–∫–æ–ª–æ–≥–∏—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞
            '–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ': 'pollution environment ecology',
            '–≤–æ–∑–¥—É—Ö': 'air pollution environment',
            '—ç–∫–æ–ª–æ–≥–∏—è': 'ecology environment nature',
            '–ø—Ä–∏—Ä–æ–¥–∞': 'nature landscape environment',
            '–∫–ª–∏–º–∞—Ç': 'climate weather environment',
            '–º—É—Å–æ—Ä': 'waste garbage pollution',

            // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education school university',
            '—à–∫–æ–ª–∞': 'school education children',
            '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': 'university college education',
            '—Å—Ç—É–¥–µ–Ω—Ç—ã': 'students university education',
            '—É—á–µ–±–∞': 'study education learning',
            '—ç–∫–∑–∞–º–µ–Ω': 'exam test education',
            '–¥–µ—Ç–∏': 'children kids family',

            // –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology innovation digital',
            '–ò–ò': 'artificial intelligence AI technology',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä': 'computer technology digital',
            '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç': 'internet technology digital',
            '—Å–º–∞—Ä—Ç—Ñ–æ–Ω': 'smartphone mobile technology',
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': 'app mobile technology',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': 'artificial intelligence AI',
            '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏': 'innovation technology',

            // –û–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞
            '–¥–µ–±–∞—Ç—ã': 'debate discussion politics',
            '–ø–æ–ª–∏—Ç–∏–∫–∞': 'politics government society',
            '–≤—ã–±–æ—Ä—ã': 'elections voting politics',
            '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 'government politics official',
            '–∑–∞–∫–æ–Ω': 'law legal government',

            // –õ—é–¥–∏ –∏ —Å–æ—Ü–∏—É–º
            '–º–æ–ª–æ–¥–µ–∂—å': 'youth young people',
            '—Å–µ–º—å—è': 'family people home',
            '—Ä–∞–±–æ—Ç–∞': 'work office business',
            '–±–∏–∑–Ω–µ—Å': 'business office corporate',
            '–¥–µ–Ω—å–≥–∏': 'money finance business',
            '—Å—Ç–∞—Ä—Ç–∞–ø': 'startup business',
            '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞': 'platform technology',

            // –ö—É–ª—å—Ç—É—Ä–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            '–∫—É–ª—å—Ç—É—Ä–∞': 'culture art tradition',
            '–∏—Å–∫—É—Å—Å—Ç–≤–æ': 'art culture creative',
            '–º—É–∑—ã–∫–∞': 'music concert performance',
            '—Ç–µ–∞—Ç—Ä': 'theater performance culture',
            '–∫–∏–Ω–æ': 'cinema movie entertainment',
            '—Ñ–µ—Å—Ç–∏–≤–∞–ª—å': 'festival celebration culture',

            // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'transport traffic urban',
            '–∞–≤—Ç–æ–º–æ–±–∏–ª—å': 'car vehicle traffic',
            '–∞–≤—Ç–æ–±—É—Å': 'bus public transport',
            '–º–µ—Ç—Ä–æ': 'subway metro transport',
            '–¥–æ—Ä–æ–≥–∞': 'road traffic transport',

            // –ï–¥–∞ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            '–µ–¥–∞': 'food restaurant cooking',
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant food dining',
            '–∫–∞—Ñ–µ': 'cafe coffee restaurant',
            '–≥–æ—Ç–æ–≤–∫–∞': 'cooking food kitchen',

            // –ü–æ–≥–æ–¥–∞ –∏ –≤—Ä–µ–º—è –≥–æ–¥–∞
            '–∑–∏–º–∞': 'winter snow cold',
            '–ª–µ—Ç–æ': 'summer sun hot',
            '–≤–µ—Å–Ω–∞': 'spring flowers nature',
            '–æ—Å–µ–Ω—å': 'autumn fall leaves',
            '–¥–æ–∂–¥—å': 'rain weather storm',
            '—Å–Ω–µ–≥': 'snow winter cold'
        };

        let translatedQuery = query.toLowerCase();

        // –ë–æ–ª–µ–µ —É–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ - –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
        Object.entries(translations).forEach(([ru, en]) => {
            const regex = new RegExp(`\\b${ru}\\b`, 'gi');
            translatedQuery = translatedQuery.replace(regex, en);
        });

        return translatedQuery;
    }

    async searchVideos(query: string, limit: number = 8): Promise<MediaItem[]> {
        try {
            console.log(`üé¨ Searching videos for: "${query}"`);

            if (!process.env.PEXELS_API) {
                throw new Error('PEXELS_API key not configured');
            }

            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const englishQuery = this.translateToEnglish(query);
            console.log(`üåê Translated query: "${englishQuery}"`);

            const videos = await client.videos.search({
                query: englishQuery,
                per_page: limit,
                orientation: 'portrait', // TikTok —Ñ–æ—Ä–º–∞—Ç
                size: 'medium' // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            });

            if ('error' in videos) {
                throw new Error(`Pexels API error: ${videos.error}`);
            }

            const processedVideos = videos.videos.map(video => {
                // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª (HD –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                const hdFile = video.video_files.find(file =>
                    file.quality === 'hd' && file.width && file.width >= 720
                );
                const bestFile = hdFile || video.video_files[0];

                return {
                    id: video.id,
                    url: bestFile?.link || '',
                    previewUrl: video.image,
                    type: 'video' as const,
                    duration: video.duration,
                    tags: video.tags ? video.tags.map((tag: any) => tag.name || tag.toString()) : [],
                    quality: hdFile ? 'hd' as const : 'sd' as const,
                    relevanceScore: this.calculateRelevance(query, video.tags ? video.tags.map((tag: any) => tag.name || tag.toString()) : [])
                } as MediaItem;
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É
            const sortedVideos = processedVideos.sort((a, b) => {
                const scoreA = (a.relevanceScore || 0) + (a.quality === 'hd' ? 0.2 : 0);
                const scoreB = (b.relevanceScore || 0) + (b.quality === 'hd' ? 0.2 : 0);
                return scoreB - scoreA;
            });

            console.log(`‚úÖ Found ${sortedVideos.length} videos`);
            return sortedVideos;

        } catch (error: any) {
            console.error('Video search error:', error);
            throw new Error(`Video search failed: ${error.message}`);
        }
    }

    async searchImages(query: string, limit: number = 5): Promise<MediaItem[]> {
        try {
            console.log(`üñºÔ∏è Searching images for: "${query}"`);

            if (!process.env.PEXELS_API) {
                throw new Error('PEXELS_API key not configured');
            }

            const englishQuery = this.translateToEnglish(query);

            const photos = await client.photos.search({
                query: englishQuery,
                per_page: limit,
                orientation: 'portrait',
                size: 'large'
            });

            if ('error' in photos) {
                throw new Error(`Pexels API error: ${photos.error}`);
            }

            const processedImages = photos.photos.map(photo => ({
                id: photo.id,
                url: photo.src.large2x || photo.src.large, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                previewUrl: photo.src.medium,
                type: 'image' as const,
                tags: photo.alt ? photo.alt.split(' ').slice(0, 8) : [],
                quality: 'hd' as const,
                relevanceScore: this.calculateRelevance(query, photo.alt ? photo.alt.split(' ') : [])
            } as MediaItem));

            console.log(`‚úÖ Found ${processedImages.length} images`);
            return processedImages.sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0));

        } catch (error: any) {
            console.error('Image search error:', error);
            throw new Error(`Image search failed: ${error.message}`);
        }
    }

    private calculateRelevance(query: string, tags: string[]): number {
        if (!tags.length) return 0;

        const queryWords = query.toLowerCase().split(' ').filter(word => word.length > 2);
        const tagWords = tags.join(' ').toLowerCase();

        let score = 0;
        queryWords.forEach(word => {
            if (tagWords.includes(word)) {
                score += 1;
            }
        });

        return score / queryWords.length; // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    }

    async getMediaForArticle(
        title: string,
        keyPoints: string[],
        tags: string[]
    ): Promise<MediaSearchResult> {
        try {
            console.log('\nüéØ ===== MEDIA SEARCH STARTED =====');
            console.log('üì∞ Article:', title);
            console.log('üè∑Ô∏è Tags:', tags.join(', '));

            // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ title, keyPoints –∏ tags
            const searchQueries = [
                title.slice(0, 50), // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–±—Ä–µ–∑–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞)
                ...keyPoints.slice(0, 2), // –ü–µ—Ä–≤—ã–µ 2 –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
                ...tags.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 —Ç–µ–≥–∞
            ].filter(query => query.length > 3);

            console.log('üîç Search queries:', searchQueries);

            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
            const searchPromises = searchQueries.slice(0, 4).map(async (query, index) => {
                console.log(`\nüîç Query ${index + 1}: "${query}"`);

                const [videos, images] = await Promise.all([
                    this.searchVideos(query, 3),
                    this.searchImages(query, 2)
                ]);

                return { videos, images, query };
            });

            const results = await Promise.all(searchPromises);

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const allVideos = this.removeDuplicates(
                results.flatMap(r => r.videos),
                'id'
            ).slice(0, 10); // –¢–æ–ø 10 –≤–∏–¥–µ–æ

            const allImages = this.removeDuplicates(
                results.flatMap(r => r.images),
                'id'
            ).slice(0, 6); // –¢–æ–ø 6 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            console.log(`\n‚úÖ MEDIA SEARCH COMPLETED`);
            console.log(`üìπ Found videos: ${allVideos.length}`);
            console.log(`üñºÔ∏è Found images: ${allImages.length}`);
            console.log('üéØ ===== END MEDIA SEARCH =====\n');

            return {
                videos: allVideos,
                images: allImages,
                searchQuery: searchQueries.join(', '),
                totalFound: allVideos.length + allImages.length
            };

        } catch (error: any) {
            console.error('Media collection error:', error);
            throw new Error(`Media collection failed: ${error.message}`);
        }
    }

    private removeDuplicates<T>(array: T[], key: keyof T): T[] {
        const seen = new Set();
        return array.filter(item => {
            const identifier = item[key];
            if (seen.has(identifier)) {
                return false;
            }
            seen.add(identifier);
            return true;
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è TikTok
    async getBestVideoForTikTok(mediaResult: MediaSearchResult): Promise<MediaItem | null> {
        const suitableVideos = mediaResult.videos.filter(video =>
            video.duration && video.duration >= 15 && video.duration <= 60 // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è TikTok
        );

        if (suitableVideos.length === 0) {
            return mediaResult.videos[0] || null;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return suitableVideos.sort((a, b) => {
            const scoreA = (a.relevanceScore || 0) + (a.quality === 'hd' ? 0.3 : 0);
            const scoreB = (b.relevanceScore || 0) + (b.quality === 'hd' ? 0.3 : 0);
            return scoreB - scoreA;
        })[0];
    }
} 